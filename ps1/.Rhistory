tt <- ddply(t, .(product_name, date_began), summarize, srt=mean("solar.runtime.measured"))
rstudio::viewData(tt)
warnings()
tt <- ddply(t, .(product_name, date_began), summarize, srt=mean(solar.runtime.measured))
tt <- ddply(.data=t, .variables=c("product_name", "date_began"), summarize, srt=mean(solar.runtime.measured))
names(t)
tt <- ddply(t, .(product_name, date_began), summarize, srt=mean(solar_runtime_measured))
rstudio::viewData(tt)
tt <- ddply(t, .(product_name, date_began), summarize, srt=mean(solar_runtime_measured,na.rm=TRUE))
rstudio::viewData(tt)
tt <- ddply(t, .(product_name, date_began), summarize, srt=mean(solar_runtime_measured,na.rm=TRUE), n=count(solar_runtime_measured, na.rm=TRUE))
tt <- ddply(t, .(product_name, date_began), summarize, srt=mean(solar_runtime_measured,na.rm=TRUE), n=count(solar_runtime_measured))
count(c(1,2,3,4))
length(c(1,2,3,4))
?length
tt <- ddply(t, .(product_name, date_began), summarize, srt=mean(solar_runtime_measured,na.rm=TRUE), n=length(solar_runtime_measured))
rstudio::viewData(tt)
tt <- ddply(t, .(product_name, date_began, setting), summarize, srt=mean(solar_runtime_measured,na.rm=TRUE), n.srt=length(solar_runtime_measured), lm=mean(runtime_flux_70))
rstudio::viewData(tt)
tt <- ddply(t, .(product_name, date_began, setting), summarize, srt=mean(solar_runtime_measured,na.rm=TRUE), n.srt=length(solar_runtime_measured), lm=mean(runtime_flux_70, na.rm=TRUE))
rstudio::viewData(tt)
tt <- ddply(t, .(product_name, date_began, setting), summarize, srt=mean(solar_runtime_measured,na.rm=TRUE), n.srt=length(solar_runtime_measured), lm.run=mean(runtime_flux_70, na.rm=TRUE), lm.nom=mean(nominal_lumin_flux), na.rm=TRUE)
rstudio::viewData(tt)
tt <- ddply(t, .(product_name, date_began, setting), summarize, srt=mean(solar_runtime_measured,na.rm=TRUE), n.srt=length(solar_runtime_measured), lm.run=mean(runtime_flux_70, na.rm=TRUE), lm.nom=mean(nominal_lumin_flux, na.rm=TRUE))
rstudio::viewData(tt)
min(NaN, 2)
min(NaN, 2, na.rm=TRUE)
tt$lm <- min(lm.run, lm.nom, na.rm=TRUE)
tt$lm <- min(tt$lm.run, tt$lm.nom, na.rm=TRUE)
rstudio::viewData(tt)
tt$lm <- min(tt$lm.run, tt$lm.nom)
hist(tt$lm)
?min
min(c(1,2,3,4), c(2,3,4,5))
tt$lm <- pmin(tt$lm.run, tt$lm.nom, na.rm=TRUE)
rstudio::viewData(tt)
tt$lmhr <- tt$lm*tt$srt
hist(tt$lmhr)
plot(ecdf(tt$lmhr))
setwd("~/Google Drive/ERG/Classes/ARE213/are213/ps1")
library(foreign) #this is to read in Stata data
library(Hmisc)
library(psych)
data <- read.dta("ps1.dta")
require(Hmisc)
install.packages(c("Hmisc", "psych"))
library(foreign) #this is to read in Stata data
library(Hmisc)
library(psych)
data <- read.dta("ps1.dta")
print(nrow(ps1.data))
## Problem 1a: Fix miss
ps1.data <- read.dta("ps1.dta") #changed name of object from "data" to avoid ambiguity issues since "data" is often embedded in functions as a general object
print(nrow(ps1.data))
## Problem 1a: Fix mis
ps1.data <- subset (ps1.data, (cardiac != 9) & (lung != 9) & (diabetes !=9) & (herpes !=9) & (chyper !=9) & (phyper !=9) & (pre4000 !=9) & (preterm !=9) & (tobacco !=9) & (cigar !=99) & (cigar6 !=6) & (alcohol !=9) & (drink !=99) & (drink5 !=5) & (wgain !=99))
print(nrow(ps1.data)) #number of records remaining after cleaning
?subset
attach(ps1.data)
detach(name=ps1.data)
wgain %in% names(ps1.data)
"wgain" %in% names(ps1.data)
?match
match("wgain", names(ps1.data))
match("alcohol", names(ps1.data))
full.record.flag <- which(ps1.data$cardiac != 9 & ps1.data$lung != 9 & ps1.data$diabetes !=9 & ps1.data$herpes != 9 & ps1.data$chyper != 9 & ps1.data$phyper != 9 & ps1.data$pre4000 !=9 & ps1.data$preterm != 9 & ps1.data$tobacco != 9 & ps1.data$cigar != 99 & ps1.data$cigar6 !=6 & ps1.data$alcohol != 9 & ps1.data$drink != 99 & ps1.data$drink5 !=5 & ps1.data$wgain !=99)
head(full.record.flag)
ps1.data$full.record <- FALSE # initialize column as F
ps1.data$full.record[full.record.flag] <- TRUE #reassign level to T for full records
head(ps1.data)
View(ps1.data)
ps1.data.clean <- subset (ps1.data, full.record == TRUE)
ps1.data <- read.dta("ps1.dta") #changed name of object from "data" to avoid ambiguity issues since "data" is often embedded in functions as a general object
print(nrow(ps1.data))
## Problem 1a: Fix missing values
## The following are the error codes for each of the 15 variables that need fixing:
# cardiac: 9
# lung: 9
# diabetes: 9
# herpes: 9
# chyper: 9
# phyper: 9
# pre4000: 9
# preterm: 9
# tobacco: 9
# cigar: 99
# cigar6: 6
# alcohol: 9
# drink: 99
# drink5: 5
# wgain: 99
# Identify which records have full data, then add a column to indicate full records or not.
full.record.flag <- which(ps1.data$cardiac != 9 & ps1.data$lung != 9 & ps1.data$diabetes !=9 & ps1.data$herpes != 9 & ps1.data$chyper != 9 & ps1.data$phyper != 9 & ps1.data$pre4000 !=9 & ps1.data$preterm != 9 & ps1.data$tobacco != 9 & ps1.data$cigar != 99 & ps1.data$cigar6 !=6 & ps1.data$alcohol != 9 & ps1.data$drink != 99 & ps1.data$drink5 !=5 & ps1.data$wgain !=99)
ps1.data$full.record <- FALSE # initialize column as F
ps1.data$full.record[full.record.flag] <- TRUE #reassign level to T for full records
ps1.data.clean <- subset (ps1.data, full.record == TRUE)
summarytable<-print(describe(ps1.data.clean, skew=FALSE, ranges=FALSE))
ps1.data.missingvalues <- subset(ps1.data, full.record == FALSE)
require(gdata)
install.packages(gdata)
install.packages("gdata")
aggregate.table(ps1.data, full.record, FUN="mean")
require(gdata)
aggregate.table(ps1.data, full.record, FUN="mean")
aggregate.table(ps1.data, "full.record", FUN="mean")
aggregate.table(ps1.data, "full.record", FUN="mean")
write.csv(ps1.data.clean, file = "ps1dataclean.csv")
?compare
nalysis...apgar, smoking, etc.
ps1.compare.records <- ddply(ps1.data, .full.record, summarize,
mean.omaps = mean(omaps),
sd.omaps = sd(omaps))
require(ddply)
require(plyr)
nalysis...apgar, smoking, etc.
ps1.compare.records <- ddply(ps1.data, .full.record, summarize,
mean.omaps = mean(omaps),
sd.omaps = sd(omaps))
ps1.compare.records <- ddply(ps1.data, .(full.record), summarize,
mean.omaps = mean(omaps),
sd.omaps = sd(omaps))
View(ps1.compare.records)
# compare records on things that matter for this analysis...apgar, smoking, etc.
ps1.compare.records <- ddply(ps1.data, .(full.record), summarize,
mean.omaps = mean(omaps),
sd.omaps = sd(omaps),
mean.fmaps = mean(fmaps),
sd.fmaps = sd(fmaps),
mean.cigar = mean(cigar),
sd.cigar = sd(cigar))
View(ps1.compare.records)
hist(ps1.data.missingvalues$cigar)
# compare records on things that matter for this analysis...apgar, smoking, etc.
ps1.compare.records <- ddply(ps1.data, .(full.record), summarize,
mean.omaps = mean(omaps),
sd.omaps = sd(omaps),
mean.fmaps = mean(fmaps),
sd.fmaps = sd(fmaps),
median.cigar = median(cigar)
)
View(ps1.compare.records)
?quantile
# compare records on things that matter for this analysis...apgar, smoking, etc.
ps1.compare.records <- ddply(ps1.data, .(full.record), summarize,
mean.omaps = mean(omaps),
sd.omaps = sd(omaps),
mean.fmaps = mean(fmaps),
sd.fmaps = sd(fmaps),
median.cigar = median(cigar),
per25.cigar = quantile(cigar,.25, na.rm = TRUE)
)
View(ps1.compare.records)
# compare records on things that matter for this analysis...apgar, smoking, etc.
ps1.compare.records <- ddply(ps1.data, .(full.record), summarize,
mean.omaps = mean(omaps),
sd.omaps = sd(omaps),
mean.fmaps = mean(fmaps),
sd.fmaps = sd(fmaps),
median.cigar = median(cigar),
per25.cigar = quantile(cigar,.25, na.rm = TRUE),
per75.cigar = quantile(cigar,.75, na.rm = TRUE),
per90.cigar = quantile(cigar,.90, na.rm = TRUE),
)
ps1.compare.records <- ddply(ps1.data, .(full.record), summarize,
mean.omaps = mean(omaps),
sd.omaps = sd(omaps),
mean.fmaps = mean(fmaps),
sd.fmaps = sd(fmaps),
median.cigar = median(cigar),
per25.cigar = quantile(cigar,.25, na.rm = TRUE),
per75.cigar = quantile(cigar,.75, na.rm = TRUE),
per90.cigar = quantile(cigar,.90, na.rm = TRUE)
)
View(ps1.compare.records)
error.cigar <- which(ps1.data$cigar == 99)
ps1.data$cigar[error.cigar] <- NA
ps1.compare.records <- ddply(ps1.data, .(full.record), summarize,
mean.omaps = mean(omaps),
sd.omaps = sd(omaps),
mean.fmaps = mean(fmaps),
sd.fmaps = sd(fmaps),
median.cigar = median(cigar),
per25.cigar = quantile(cigar,.25, na.rm = TRUE),
per75.cigar = quantile(cigar,.75, na.rm = TRUE),
per90.cigar = quantile(cigar,.90, na.rm = TRUE)
)
View(ps1.compare.records)
ps1.compare.records <- ddply(ps1.data, .(full.record), summarize,
mean.omaps = mean(omaps),
sd.omaps = sd(omaps),
mean.fmaps = mean(fmaps),
sd.fmaps = sd(fmaps),
median.cigar = median(cigar, na.rm = TRUE),
per25.cigar = quantile(cigar,.25, na.rm = TRUE),
per75.cigar = quantile(cigar,.75, na.rm = TRUE),
per90.cigar = quantile(cigar,.90, na.rm = TRUE),
mean.cigar = mean(cigar, na.rm = TRUE)
)
View(ps1.compare.records)
ps1.compare.records <- ddply(ps1.data, .(full.record), summarize,
mean.omaps = mean(omaps),
sd.omaps = sd(omaps),
mean.fmaps = mean(fmaps),
sd.fmaps = sd(fmaps),
median.cigar = median(cigar, na.rm = TRUE),
per25.cigar = quantile(cigar,.25, na.rm = TRUE),
per75.cigar = quantile(cigar,.75, na.rm = TRUE),
per90.cigar = quantile(cigar,.90, na.rm = TRUE),
mean.cigar = mean(cigar, na.rm = TRUE),
sd.cigar = sd(cigar, na.rm = TRUE)
)
View(ps1.compare.records)
ggplot(ps1.data, aes(x=cigar)) + geom_histogram() + facet_grid(.~full.record)
require(ggplot2)
ggplot(ps1.data, aes(x=cigar)) + geom_histogram() + facet_grid(.~full.record)
ggplot(ps1.data, aes(x=cigar)) + geom_boxplot() + facet_grid(.~full.record)
ggplot(ps1.data, aes(y=cigar)) + geom_boxplot() + facet_grid(.~full.record)
ggplot(ps1.data, aes(cigar)) + geom_boxplot(aes(factor=full.record))
ggplot(ps1.data, aes(cigar)) + geom_boxplot(aes(factor(full.record))
)
ggplot(ps1.data, aes(factor(full.record),cigar)) + geom_boxplot()
ggplot(ps1.data, aes(factor(full.record),cigar)) + geom_boxplot() + ylim(0,15)
ggplot(ps1.data, aes(cigar)) + geom_density() + facet_grid(full.record~.)
ggplot(ps1.data, aes(cigar)) + geom_density() + facet_grid(full.record~.) + xlab("Number of daily cigarettes") + ylab("Density of responses")
ggplot(ps1.data, aes(cigar)) + geom_density() + facet_grid(full.record~.) + xlab("Number of daily cigarettes") + ylab("Density of responses") + ggtitle("TRUE = Full Records Available, FALSE = Missing Records")
pdf(file="/img/cigar-by-record-type.pdf", width = 7, height = 6)
ggplot(ps1.data, aes(cigar)) + geom_density() + facet_grid(full.record~.) + xlab("Number of daily cigarettes") + ylab("Density of responses") + ggtitle("TRUE = Full Records Available, FALSE = Missing Records")
dev.off()
pdf(file="img/cigar-by-record-type.pdf", width = 7, height = 6)
ggplot(ps1.data, aes(cigar)) + geom_density() + facet_grid(full.record~.) + xlab("Number of daily cigarettes") + ylab("Density of responses") + ggtitle("TRUE = Full Records Available, FALSE = Missing Records")
dev.off()
library(car)
attach(Prestige)
detach(Prestige)
data(Prestige)
str(Prestige)
pres <- Prestige
str(pres)
?geom_density
require(ggplot2)
require(plyr)
?geom_density
?density
plot(density(pres$income))
plot(density(pres$income,bw=100))
plot(density(pres$income,bw=500))
plot(density(pres$income,bw=5000))
plot(density(pres$income,bw=50))
plot(density(pres$income,bw=50))
summary(density(pres$income,bw=50))
summary(density(pres$income))
plot(density(pres$income))
plot(density(pres$income, kernel="epanechnikov"))
plot(density(pres$income, kernel="uniform"))
plot(density(pres$income, kernel="rectangular"))
plot(density(pres$income, kernel="g", bw=200))
plot(loess(pres$income))
plot(loess(income ~ education, pres))
?density
require(ggplot2)
require(plyr)
require(np)
install.packages("np")
require(ggplot2)
require(plyr)
require(np)
?np
help.zelig()
require(Zelig)
help.zelig()
help.zelig("models")
?loess
??kern
?auto.arima
??arima
require(forecast)
?auto.arima
average(5, -20)
mean(5,-20)
mean(c(5,-20))
10^10 / 10^6
10^11 / 10^9
?loess
10^9
10*10^9
(10*10^9) / 50
(10*10^9) / 50
100000000
50*300000
50*300000000
# PROBLEM SET 1B
# ARE 213 Fall 2013
# Frank's Directory
#setwd("/media/frank/Data/documents/school/berkeley/fall13/are213/are213/ps1")
# Peter's Directory
#setwd("~/Google Drive/ERG/Classes/ARE213/are213/ps1")
# Packages --------
library(foreign) #this is to read in Stata data
library(Hmisc)
library(psych)
library(stargazer)
library(ggplot2) # for neato plotting tools
library(plyr) # for nice data tools like ddply
library(epicalc) # For likelihood ratio test
library(car) # "companion for applied regression" - recode fxn, etc.
library(gmodels) #for Crosstabs
library(splines) # for series regression
library(np) #nonparametric regression
library(rms) #regression modeling tools
library(effects)
# Homebrewed functions
source("../util/are213-func.R")
source("../util/watercolor.R") # for watercolor plots
# Data -------
ps1.data <- read.dta(file="ps1.dta")
var.labels <- attr(ps1.data, "var.labels")
# Data Cleaning Step
full.record.flag <- which(ps1.data$cardiac != 9 &
ps1.data$cardiac != 8 &
ps1.data$lung != 9 &
ps1.data$lung != 8 &
ps1.data$diabetes !=9 &
ps1.data$diabetes !=8 &
ps1.data$herpes != 9 &
ps1.data$herpes != 8 &
ps1.data$chyper != 9 &
ps1.data$chyper != 8 &
ps1.data$phyper != 9 &
ps1.data$phyper != 8 &
ps1.data$pre4000 !=9 &
ps1.data$pre4000 !=8 &
ps1.data$preterm != 9 &
ps1.data$preterm != 8 &
ps1.data$tobacco != 9 &
ps1.data$cigar != 99 &
ps1.data$cigar6 !=6 &
ps1.data$alcohol != 9 &
ps1.data$drink != 99 &
ps1.data$drink5 !=5 &
ps1.data$wgain !=99
)
ps1.data$full.record <- FALSE # initialize column as F
ps1.data$full.record[full.record.flag] <- TRUE #reassign level to T for full records
ps1.data.clean <- subset (ps1.data, full.record == TRUE)
ps1.data.missingvalues <- subset(ps1.data, full.record == FALSE)
setwd("~/Google Drive/ERG/Classes/ARE213/are213/ps1")
# Packages --------
library(foreign) #this is to read in Stata data
library(Hmisc)
library(psych)
library(stargazer)
library(ggplot2) # for neato plotting tools
library(plyr) # for nice data tools like ddply
library(epicalc) # For likelihood ratio test
library(car) # "companion for applied regression" - recode fxn, etc.
library(gmodels) #for Crosstabs
library(splines) # for series regression
library(np) #nonparametric regression
library(rms) #regression modeling tools
library(effects)
# Homebrewed functions
source("../util/are213-func.R")
source("../util/watercolor.R") # for watercolor plots
# Data -------
ps1.data <- read.dta(file="ps1.dta")
var.labels <- attr(ps1.data, "var.labels")
# Data Cleaning Step
full.record.flag <- which(ps1.data$cardiac != 9 &
ps1.data$cardiac != 8 &
ps1.data$lung != 9 &
ps1.data$lung != 8 &
ps1.data$diabetes !=9 &
ps1.data$diabetes !=8 &
ps1.data$herpes != 9 &
ps1.data$herpes != 8 &
ps1.data$chyper != 9 &
ps1.data$chyper != 8 &
ps1.data$phyper != 9 &
ps1.data$phyper != 8 &
ps1.data$pre4000 !=9 &
ps1.data$pre4000 !=8 &
ps1.data$preterm != 9 &
ps1.data$preterm != 8 &
ps1.data$tobacco != 9 &
ps1.data$cigar != 99 &
ps1.data$cigar6 !=6 &
ps1.data$alcohol != 9 &
ps1.data$drink != 99 &
ps1.data$drink5 !=5 &
ps1.data$wgain !=99
)
ps1.data$full.record <- FALSE # initialize column as F
ps1.data$full.record[full.record.flag] <- TRUE #reassign level to T for full records
ps1.data.clean <- subset (ps1.data, full.record == TRUE)
ps1.data.missingvalues <- subset(ps1.data, full.record == FALSE)
ps1.data.clean$tobacco <- as.factor(ps1.data.clean$tobacco)
ps1.data.clean$dmar <- as.factor(ps1.data.clean$dmar)
quartz()
plot(ps1.data.clean$dmage, wsp.ps1a$fitted.values)
ps1.data.clean$tobacco <- as.factor(ps1.data.clean$tobacco)
ps1.data.clean$dmar <- as.factor(ps1.data.clean$dmar)
wsp.ps1a <- lm(dbrwt ~ tobacco + dmage + dmar, data=ps1.data.clean)
wsp <- lm(dbrwt ~ tobacco + ns(dmage, df=3) + dmar, data=ps1.data.clean)
wsp.int <- lm(dbrwt ~ tobacco * ns(dmage, df=3) * dmar, data=ps1.data.clean)
plot(ps1.data.clean$dmage, wsp.ps1a$fitted.values)
plot(ps1.data.clean$dmage, wsp.ps1a$fitted.values, xlim=c(0,4500))
plot(ps1.data.clean$dmage, wsp.ps1a$fitted.values, ylim=c(0,4500))
plot(ps1.data.clean$dmage, wsp.ps1a$fitted.values, ylim=c(2000,4000))
points(ps1.data.clean$dmage, wsp$fitted.values, col="blue")
points(ps1.data.clean$dmage, wsp.int$fitted.values, col="red")
points(ps1.data.clean$dmage, ps1.data.clean$dbrwt, pch=".")
summary(effect("tobacco", wsp))
stargazer(wsp.ps1a, wsp, wsp.int, type="text")
stargazer(wsp.ps1a, wsp, wsp.int, type="text")->quiet
levels(ps1.data.clean$dfeduc)
class(ps1.data.clean$dfeduc)
levels(as.factor(ps1.data.clean$dfeduc))
# Problem 2a --------
ps1.data.clean$tobacco.rescale <- with(ps1.data.clean, recode(tobacco, "2='0'", as.numeric.result=TRUE)) #rescales the tobacco use variable to be 0/1, where 0=no and 1 = yes
ps1.data.clean$dmar.rescale <- with(ps1.data.clean, recode(dmar, "2='0'"))
smoke.propensity.all <- glm(tobacco.rescale ~ as.factor(mrace3) + dmeduc + dmar.rescale + dfage + dfeduc + as.factor(orfath) + dplural + csex + dmage, data=ps1.data.clean, family = binomial()) ## Did I miss any predetermined covariates here? No.
smoke.propensity.reduced <- glm(tobacco.rescale ~ as.factor(mrace3) + dmeduc + dmar.rescale + dfage + dfeduc + as.factor(orfath), data=ps1.data.clean, family = binomial())
ps1.data.clean$propensityfull <- predict(smoke.propensity.all, type = "response")
ps1.data.clean$propensityreduced <- predict(smoke.propensity.reduced, type = "response")
hist(ps1.data.clean$propensityfull)
sink(file = "lrtest.tex", append = FALSE)
lrtest(smoke.propensity.all, smoke.propensity.reduced) #Test whether the two scores are statistically different
sink()
print("Works through 2a")
lrtest(smoke.propensity.all, smoke.propensity.reduced)
?lrtest
detach(rms)
detach("package:rms")
lrtest(smoke.propensity.all, smoke.propensity.reduced)
detach("package:rms")
sink(file = "lrtest.tex", append = FALSE)
lrtest(smoke.propensity.all, smoke.propensity.reduced) #Test whether the two scores are statistically different
sink()
print("Works through 2a")
require(rms)
sm.propensityregression <- lm(dbrwt ~ tobacco.rescale + (propensityreduced * tobacco.rescale) + propensityreduced, ps1.data.clean)
summary(sm.propensityregression)
sm.propensityregression2 <- lm(dbrwt ~ tobacco.rescale * propensityreduced, ps1.data.clean)
summary(sm.propensityregression2)
coefficients(sm.propensityregression)[2] + coefficients(sm.propensityregression)[4]*mean(ps1.data.clean$propensityreduced)
summary(effect("tobacco.rescale", sm.propensityregression))
3407-3184
effect("tobacco.rescale", sm.propensityregression)->output
str(output)
output$fit[1] - output$fit[2]
tobacco.effects <- (effect("tobacco.rescale", sm.propensityregression))
print(paste("ATE is", tobacco.effects$fit[1] - tobacco.effects$fit[2]))
print(paste("ATE is", tobacco.effects$fit[1] - tobacco.effects$fit[2]), "based on regression adjustment with p-score.")
print(paste("ATE is", tobacco.effects$fit[1] - tobacco.effects$fit[2], "based on regression adjustment with p-score.")
print(paste("ATE is", tobacco.effects$fit[1] - tobacco.effects$fit[2], "based on regression adjustment with p-score."))
?round
print(paste("ATE is", round(tobacco.effects$fit[1] - tobacco.effects$fit[2], digits=0), "based on regression adjustment with p-score."))
term1 <- with(ps1.data.clean, sum((tobacco.rescale*dbrwt)/propensityreduced)/sum(tobacco.rescale/propensityreduced))
term2 <- with(ps1.data.clean, sum(((1-tobacco.rescale)*dbrwt)/(1-propensityreduced))/sum((1-tobacco.rescale)/(1-propensityreduced)))
weightingestimator <- term1-term2 #This should be the average treatment effect
weightingestimator
term1
term2
head(as.numeric(ps1.data.clean$tobacco.rescale))
head(as.numeric(levels(ps1.data.clean$tobacco.rescale)$ps1.data.clean$tobacco.rescale)
)
head(as.numeric(levels(ps1.data.clean$tobacco.rescale)))
head(as.numeric(levels(ps1.data.clean$tobacco.rescale)))[ps1.data.clean$tobacco.rescale])
head(as.numeric(levels(ps1.data.clean$tobacco.rescale))[ps1.data.clean$tobacco.rescale])
ps1.data.clean$tobacco.rescale.n <- as.numeric(levels(ps1.data.clean$tobacco.rescale))[ps1.data.clean$tobacco.rescale]
term1 <- with(ps1.data.clean, sum((tobacco.rescale.n*dbrwt)/propensityreduced)/sum(tobacco.rescale.n/propensityreduced))
term2 <- with(ps1.data.clean, sum(((1-tobacco.rescale.n)*dbrwt)/(1-propensityreduced))/sum((1-tobacco.rescale.n)/(1-propensityreduced)))
weightingestimator <- term1-term2 #This should be the average treatment effect
weightingestimator
term1.T <- with(subset(ps1.data.clean, tobacco.rescale.n=1), sum((tobacco.rescale*dbrwt)/propensityreduced)/sum(tobacco.rescale.n/propensityreduced))
#term2.T <- with(subset(ps1.data.clean, tobacco.rescale=1), sum(((1-tobacco.rescale)*dbrwt)/(1-propensityreduced))/sum((1-tobacco.rescale)/(1-propensityreduced)))
weightingestimator.T <- term1.T#-term2.T #This should be the average treatment on treated
term1.T <- with(subset(ps1.data.clean, tobacco.rescale.n=1), sum((tobacco.rescale.n*dbrwt)/propensityreduced)/sum(tobacco.rescale.n/propensityreduced))
#term2.T <- with(subset(ps1.data.clean, tobacco.rescale=1), sum(((1-tobacco.rescale)*dbrwt)/(1-propensityreduced))/sum((1-tobacco.rescale)/(1-propensityreduced)))
weightingestimator.T <- term1.T#-term2.T #This should be the average treatment on treated
term1.T
tot.propensity.nosm <- with(subset(ps1.data.clean, tobacco.rescale == 0), sum(propensityreduced))
tot.propensity.sm <- with(subset(ps1.data.clean, tobacco.rescale == 1), sum(propensityreduced))
h <- 35 # This is to play with the bandwidth
kerndensity.nosm <- with(subset(ps1.data.clean, tobacco.rescale == 0), density(dbrwt, #if nobody smoked
kernel = "epanechnikov",
bw = h,
weights = propensityreduced/tot.propensity.nosm))
kerndensity.nosm
plot(kerndensity.nosm)
kerndensity.nosm.df <- data.frame(kerndensity.nosm[1], kerndensity.nosm[2])
kerndensity.sm <- with(subset(ps1.data.clean, tobacco.rescale == 1), density(dbrwt, #if everybody smoked
kernel = "epanechnikov",
bw = h,
weights = propensityreduced/tot.propensity.sm))
kerndensity.sm.df <- data.frame(kerndensity.sm[1], kerndensity.sm[2])
kerndensity.plot <- ggplot(kerndensity.nosm.df, aes(x, y))
kerndensity.plot <- kerndensity.plot +
geom_line(linetype = 'dotted') +
geom_line(data = kerndensity.sm.df, aes(x, y)) +
labs(title = paste("Density of birthweights estimated using \n propensity score-weighted kernel regression \n Bandwidth=", as.factor(h)), x = "Birthweight (grams)", y = "Density") +
guides(linetype = "Legend") # Having trouble getting a legend.
kerndensity.plot
which(ps1.data.clean$dbrwt==3000)
which(ps1.data.clean$dbrwt==3000 & tobacco.rescale ==1)
which(ps1.data.clean$dbrwt==3000 & ps1.data.clean$tobacco.rescale ==1)
which(ps1.data.clean$dbrwt==3000 & ps1.data.clean$tobacco.rescale ==0)
which(ps1.data.clean$dbrwt==3000 & ps1.data.clean$tobacco.rescale ==1)->smokers3000
mean(ps1.data.clean$propensityreduced)[smokers3000]
smokers3000
mean(ps1.data.clean$propensityreduced[smokers3000])
hist(ps1.data.clean$propensityreduced[smokers3000])
